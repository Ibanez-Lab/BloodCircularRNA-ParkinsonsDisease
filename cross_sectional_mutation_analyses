# 1.0 Load Libraries & Import Data ---------------------------------------------------------
library(data.table)
library(tximport)
library(DESeq2)
library(matrixStats)
library(dplyr)
library(ggplot2)
library(reshape2)
library(stringr)
library(ggrepel)
library(org.Hs.eg.db)

# 2.0 Mutaion Status--------------------------------------------------------------------------------------------------------------------------------------------
# 2.1 Import pheno-----------------------------------------------

#load phenotype 
pheno <- read.table("ppmi_pheno.txt", header = T, stringsAsFactors = F)
# Pull out control and PD individuals (0 and 1 in Status_time column)
pheno <- subset(pheno, pheno$Status_time %in% c(0, 1))

# select for last visit only
pheno <- pheno %>% group_by(PATNO) %>% mutate(last_visit = (Time == max(Time)))
pheno <- subset(pheno, pheno$last_visit == T)


# 2.2 Read in the matrix------------------------------------------
countMatrix <- read.csv("ppmi_countmatrix.csv", row.names = 1, header = T)
countMatrix<- floor(countMatrix)

#Removing sample with low reads
countMatrixclean<- countMatrix[(rowCounts(countMatrix[,-1]<10) < round(0.9*dim(countMatrix[,-1])[2])),]
pheno <- pheno[pheno$FILE_NAME %in% colnames(countMatrixclean),]

# Extract the sample IDs from the phenotype data
sample_ids <- pheno$FILE_NAME

# Subset the countMatrix to include only the columns in sample_ids
countMatrixfinal<- countMatrixclean[, sample_ids]
countMatrixfinal<-floor(countMatrixfinal)
#Modify pheno for mutations
pheno <- pheno %>%
  mutate(Mutation = ifelse(Status_time == "0" & is.na(Mutation), "none", Mutation),
         Mutation = ifelse(Status_time == "1" & is.na(Mutation), "none", Mutation))

#Modify count matrix for mutation
# Extract the sample IDs from the phenotype data
sample_ids <- pheno$FILE_NAME

# Subset the countMatrix to include only the columns in sample_ids
countMatrixfinal<- countMatrixclean[, sample_ids]
countMatrixfinal<-floor(countMatrixfinal)
#First we need to modify our phenotype data
pheno$phase <- ifelse(grepl("Phase1", pheno$FILE_NAME), "Phase1", ifelse(grepl("Phase2", pheno$FILE_NAME), "Phase2", NA))
pheno$phase<- factor(pheno$phase)



# 2.3 DESeq ------------------------------------------------------
dds <- DESeqDataSetFromMatrix(countData = countMatrixfinal, colData = pheno, design = ~ factor(Gender) + AgeVisit + Mutation + factor(Status_time))
#keep <- rowSums(counts(dds) >= ) matrixStats::rowCounts(quantData$counts<10) < round(0.9*dim(quantData$counts)
dds.de <- DESeq(dds, parallel = F, betaPrior = FALSE)

dds.res <- results(dds.de, tidy = T)
write.csv(dds.res, "degs_mutation.csv")
#Make a copy of dds.res
dds.res2 <- dds.res
#Remove the dot and proceeding numbers
dds.res2$row <- sub("\\..*","",dds.res2$row)
dds.res2$row <- mapIds(org.Hs.eg.db, keys = dds.res2$row, column = "SYMBOL", keytype = "ENSEMBL")

summary(dds.res)
dds.sig <- subset(dds.res2, dds.res2$padj < 0.05)

# 2.4 plotting the volcano plot-----------------------------------
DE <- dds.res2[order(dds.res2$padj), ]
volcano.name <- "PPMI Linear RNA Expression Last Visit ca/co"
l2f.lim <- 0
plim <- 0.05
choice <- 'padj'
plotDE <- DE %>% mutate(gene_type = case_when(log2FoldChange >= l2f.lim & get(choice) <= plim ~ "up",
                                              log2FoldChange <= -l2f.lim & get(choice) <= plim ~ "down", TRUE ~ "ns"))
plotDE <- plotDE[order(plotDE$pvalue), ]
#Get the 9 circ degs
result_9circ<- read.table("9circs.txt", header = T) 
result_9circ$linear <- sub("\\..*","",result_9circ$linear)
result_9circ$linear <- mapIds(org.Hs.eg.db, keys = result_9circ$linear, column = "SYMBOL", keytype = "ENSEMBL")
circ_names<-result_9circ$linear

nine_circ<- plotDE[plotDE$row %in% circ_names, ]
cols <- densCols(plotDE$log2FoldChange, plotDE$padj)
cols[plotDE$gene_type=='up']<-"#E69F00"
cols[plotDE$gene_type=='down']<-"#56B4E9"
cols[plotDE$gene_type=='ns']<-"#999999"
sizes <- c("up" = 3, "down" = 3, "ns" = 2)
alphas <- c("up" = 1, "down" = 1, "ns" = 0.5)
sig <- plotDE[plotDE$pvalue<=plim & plotDE$gene_type!='ns',]

top_hits_num <- 10
sig <- sig[1:top_hits_num, ]
ggplot(plotDE, aes(x=log2FoldChange, y=-log10(pvalue), size=gene_type, alpha = gene_type))+
  geom_point(col = cols)+
  #scale_y_continuous(expand = c(0,0), limits = c(0, 15))+
  geom_hline(yintercept = -log10(plim), linetype = "dashed") +
  geom_vline(xintercept = c(-l2f.lim, l2f.lim), linetype = "dashed") +
  geom_label_repel(data = nine_circ, aes(label = row), force = 2, nudge_y = 1) +
  scale_size_manual(values = sizes) + # Modify point size
  scale_alpha_manual(values = alphas) + # Modify point transparency
  ggtitle(volcano.name) +
  xlab("Effect size: log2(fold-change)") +
  ylab("-log10(p-value)")+
  theme_bw()+
  theme(legend.position = "none")

# 3.0 Mutation vs non carrier-----------------------------------------------------------------------------------------------------------------------------------------

# 3.1 Import pheno  --------------------------------------------

#load phenotype 
pheno <- read.table("ppmi_pheno", header = T, stringsAsFactors = F)
# Pull out control and PD individuals (0 and 1 in Status_time column)
pheno <- subset(pheno, pheno$Status_time %in% c(0, 1))

# select for last visit only
pheno <- pheno %>% group_by(PATNO) %>% mutate(last_visit = (Time == max(Time)))
pheno <- subset(pheno, pheno$last_visit == T)


# 3.2 Read in Matrix -----------------------------------------
countMatrix <- read.csv("ppmi_countmatrix.csv", row.names = 1, header = T)


#Removing sample with low reads
countMatrixclean<- countMatrix[(rowCounts(countMatrix[,-1]<10) < round(0.9*dim(countMatrix[,-1])[2])),]
pheno <- pheno[pheno$FILE_NAME %in% colnames(countMatrixclean),]

# Extract the sample IDs from the phenotype data
sample_ids <- pheno$FILE_NAME

# Subset the countMatrix to include only the columns in sample_ids
countMatrixfinal<- countMatrixclean[, sample_ids]
countMatrixfinal<-floor(countMatrixfinal)
#Modify pheno for mutations
pheno <- pheno %>%
  mutate(Mutation = ifelse(Status_time== "1" & is.na(Mutation), "none", Mutation),
         Mutation = ifelse(Status_time == "0" & is.na(Mutation), "control", Mutation))
pheno <- pheno %>% filter(Mutation %in% c("none", "control"))
pheno$Mutation<-as.factor(pheno$Mutation)
#Modify count matrix for mutation
# Extract the sample IDs from the phenotype data
sample_ids <- pheno$FILE_NAME

# Subset the countMatrix to include only the columns in sample_ids
countMatrixfinal<- countMatrixclean[, sample_ids]
countMatrixfinal<-floor(countMatrixfinal)
#First we need to modify our phenotype data
pheno$phase <- ifelse(grepl("Phase1", pheno$FILE_NAME), "Phase1", ifelse(grepl("Phase2", pheno$FILE_NAME), "Phase2", NA))
pheno$phase<- factor(pheno$phase)

str(pheno)


# 3.3 DESeq ------------------------------------------------------
dds <- DESeqDataSetFromMatrix(countData = countMatrixfinal, colData = pheno, design = ~ factor(Gender) + AgeVisit + factor(Status_time))
#keep <- rowSums(counts(dds) >= ) matrixStats::rowCounts(quantData$counts<10) < round(0.9*dim(quantData$counts)
dds.de <- DESeq(dds, parallel = F, betaPrior = FALSE)

dds.res <- results(dds.de, tidy = T)
write.csv(dds.res, "Mutation_noncarriers.csv")
#Make a copy of dds.res
dds.res2 <- dds.res
#Remove the dot and proceeding numbers
dds.res2$row <- sub("\\..*","",dds.res2$row)
dds.res2$row <- mapIds(org.Hs.eg.db, keys = dds.res2$row, column = "SYMBOL", keytype = "ENSEMBL")

summary(dds.res)
dds.sig <- subset(dds.res2, dds.res2$padj < 0.05)

# 3.4 plotting the volcano plot-------------------------------------
DE <- dds.res2[order(dds.res2$padj), ]
volcano.name <- "PPMI Linear RNA Expression Last Visit ca/co + noncarriers"
l2f.lim <- 0
plim <- 0.05
choice <- 'padj'
plotDE <- DE %>% mutate(gene_type = case_when(log2FoldChange >= l2f.lim & get(choice) <= plim ~ "up",
                                              log2FoldChange <= -l2f.lim & get(choice) <= plim ~ "down", TRUE ~ "ns"))
plotDE <- plotDE[order(plotDE$pvalue), ]
#Get the 9 circ degs
result_9circ<- read.table("9circs.txt", header = T) 
result_9circ$linear <- sub("\\..*","",result_9circ$linear)
result_9circ$linear <- mapIds(org.Hs.eg.db, keys = result_9circ$linear, column = "SYMBOL", keytype = "ENSEMBL")
circ_names<-result_9circ$linear

nine_circ<- plotDE[plotDE$row %in% circ_names, ]
cols <- densCols(plotDE$log2FoldChange, plotDE$padj)
cols[plotDE$gene_type=='up']<-"#E69F00"
cols[plotDE$gene_type=='down']<-"#56B4E9"
cols[plotDE$gene_type=='ns']<-"#999999"
sizes <- c("up" = 3, "down" = 3, "ns" = 2)
alphas <- c("up" = 1, "down" = 1, "ns" = 0.5)
sig <- plotDE[plotDE$pvalue<=plim & plotDE$gene_type!='ns',]

top_hits_num <- 10
sig <- sig[1:top_hits_num, ]
ggplot(plotDE, aes(x=log2FoldChange, y=-log10(pvalue), size=gene_type, alpha = gene_type))+
  geom_point(col = cols)+
  #scale_y_continuous(expand = c(0,0), limits = c(0, 15))+
  geom_hline(yintercept = -log10(plim), linetype = "dashed") +
  geom_vline(xintercept = c(-l2f.lim, l2f.lim), linetype = "dashed") +
  geom_label_repel(data = nine_circ, aes(label = row), force = 2, nudge_y = 1) +
  scale_size_manual(values = sizes) + # Modify point size
  scale_alpha_manual(values = alphas) + # Modify point transparency
  ggtitle(volcano.name) +
  xlab("Effect size: log2(fold-change)") +
  ylab("-log10(p-value)")+
  theme_bw()+
  theme(legend.position = "none")


# 4.0 LRKK2 vs Control------------------------------------------------------------------------------------------------------------------------------

# 4.1 Import pheno  --------------------------------------------
#load phenotype
pheno <- read.table("ppmi_pheno.txt", header = T, stringsAsFactors = F)
# Pull out control and PD individuals (0 and 1 in Status_time column)
pheno <- subset(pheno, pheno$Status_time %in% c(0, 1))

# select for last visit only
pheno <- pheno %>% group_by(PATNO) %>% mutate(last_visit = (Time == max(Time)))
pheno <- subset(pheno, pheno$last_visit == T)


# 4.2 Read in Matrix -------------------------------------------
countMatrix <- read.csv("ppmi_countmatrix", row.names = 1, header = T)


#Removing sample with low reads
countMatrixclean<- countMatrix[(rowCounts(countMatrix[,-1]<10) < round(0.9*dim(countMatrix[,-1])[2])),]
pheno <- pheno[pheno$FILE_NAME %in% colnames(countMatrixclean),]

# Extract the sample IDs from the phenotype data
sample_ids <- pheno$FILE_NAME

# Subset the countMatrix to include only the columns in sample_ids
countMatrixfinal<- countMatrixclean[, sample_ids]
countMatrixfinal<-floor(countMatrixfinal)
#Modify pheno for mutations
pheno <- pheno %>%
  mutate(Mutation = ifelse(Status_time== "1" & is.na(Mutation), "none", Mutation),
         Mutation = ifelse(Status_time == "0" & is.na(Mutation), "control", Mutation))
pheno <- pheno %>% filter(Mutation %in% c("LRRK2+", "control"))
pheno$Mutation<-as.factor(pheno$Mutation)Mutation 
#Modify count matrix for mutation
# Extract the sample IDs from the phenotype data
sample_ids <- pheno$FILE_NAME

# Subset the countMatrix to include only the columns in sample_ids
countMatrixfinal<- countMatrixclean[, sample_ids]
countMatrixfinal<-floor(countMatrixfinal)
#First we need to modify our phenotype data
pheno$phase <- ifelse(grepl("Phase1", pheno$FILE_NAME), "Phase1", ifelse(grepl("Phase2", pheno$FILE_NAME), "Phase2", NA))
pheno$phase<- factor(pheno$phase)

str(pheno)


# 4.3 DESeq ------------------------------------------------------
dds <- DESeqDataSetFromMatrix(countData = countMatrixfinal, colData = pheno, design = ~ factor(Gender) + AgeVisit + factor(Status_time))
#keep <- rowSums(counts(dds) >= ) matrixStats::rowCounts(quantData$counts<10) < round(0.9*dim(quantData$counts)
dds.de <- DESeq(dds, parallel = F, betaPrior = FALSE)

dds.res <- results(dds.de, tidy = T)
write.csv(dds.res, "Mutation_LRRK2.csv")
#Make a copy of dds.res
dds.res2 <- dds.res
#Remove the dot and proceeding numbers
dds.res2$row <- sub("\\..*","",dds.res2$row)
dds.res2$row <- mapIds(org.Hs.eg.db, keys = dds.res2$row, column = "SYMBOL", keytype = "ENSEMBL")

summary(dds.res)
dds.sig <- subset(dds.res2, dds.res2$padj < 0.05)

# 4.4 plotting the volcano plot--------------------------------
DE <- dds.res2[order(dds.res2$padj), ]
volcano.name <- "PPMI Linear RNA Expression Last Visit ca/co + LRRK2+"
l2f.lim <- 0
plim <- 0.05
choice <- 'padj'
plotDE <- DE %>% mutate(gene_type = case_when(log2FoldChange >= l2f.lim & get(choice) <= plim ~ "up",
                                              log2FoldChange <= -l2f.lim & get(choice) <= plim ~ "down", TRUE ~ "ns"))
plotDE <- plotDE[order(plotDE$pvalue), ]
#Get the 9 circ degs
result_9circ<- read.table("9circ.txt", header = T) 
result_9circ$linear <- sub("\\..*","",result_9circ$linear)
result_9circ$linear <- mapIds(org.Hs.eg.db, keys = result_9circ$linear, column = "SYMBOL", keytype = "ENSEMBL")
circ_names<-result_9circ$linear

nine_circ<- plotDE[plotDE$row %in% circ_names, ]
cols <- densCols(plotDE$log2FoldChange, plotDE$padj)
cols[plotDE$gene_type=='up']<-"#E69F00"
cols[plotDE$gene_type=='down']<-"#56B4E9"
cols[plotDE$gene_type=='ns']<-"#999999"
sizes <- c("up" = 3, "down" = 3, "ns" = 2)
alphas <- c("up" = 1, "down" = 1, "ns" = 0.5)
sig <- plotDE[plotDE$pvalue<=plim & plotDE$gene_type!='ns',]

top_hits_num <- 10
sig <- sig[1:top_hits_num, ]
ggplot(plotDE, aes(x=log2FoldChange, y=-log10(pvalue), size=gene_type, alpha = gene_type))+
  geom_point(col = cols)+
  #scale_y_continuous(expand = c(0,0), limits = c(0, 15))+
  geom_hline(yintercept = -log10(plim), linetype = "dashed") +
  geom_vline(xintercept = c(-l2f.lim, l2f.lim), linetype = "dashed") +
  geom_label_repel(data = nine_circ, aes(label = row), force = 2, nudge_y = 1) +
  scale_size_manual(values = sizes) + # Modify point size
  scale_alpha_manual(values = alphas) + # Modify point transparency
  ggtitle(volcano.name) +
  xlab("Effect size: log2(fold-change)") +
  ylab("-log10(p-value)")+
  theme_bw()+
  theme(legend.position = "none")


# 5.0 GBA vs Controls--------------------------------------------------------------------------------------------------------------------------

# 5.1 Import pheno  ---------------------------------------

#load phenotype 
pheno <- read.table("ppmi_pheno.txt", header = T, stringsAsFactors = F)
# Pull out control and PD individuals (0 and 1 in Status_time column)
pheno <- subset(pheno, pheno$Status_time %in% c(0, 1))

# select for last visit only
pheno <- pheno %>% group_by(PATNO) %>% mutate(last_visit = (Time == max(Time)))
pheno <- subset(pheno, pheno$last_visit == T)


#5.2 Read in Matrix ---------------------------------------
countMatrix <- read.csv("ppmi_countmatrix.csv", row.names = 1, header = T)


#Removing sample with low reads
countMatrixclean<- countMatrix[(rowCounts(countMatrix[,-1]<10) < round(0.9*dim(countMatrix[,-1])[2])),]
pheno <- pheno[pheno$FILE_NAME %in% colnames(countMatrixclean),]

# Extract the sample IDs from the phenotype data
sample_ids <- pheno$FILE_NAME

# Subset the countMatrix to include only the columns in sample_ids
countMatrixfinal<- countMatrixclean[, sample_ids]
countMatrixfinal<-floor(countMatrixfinal)
#Modify pheno for mutations
pheno <- pheno %>%
  mutate(Mutation = ifelse(Status_time== "1" & is.na(Mutation), "none", Mutation),
         Mutation = ifelse(Status_time == "0" & is.na(Mutation), "control", Mutation))
pheno <- pheno %>% filter(Mutation %in% c("GBA+", "control"))
pheno$Mutation<-as.factor(pheno$Mutation)
#Modify count matrix for mutation
# Extract the sample IDs from the phenotype data
sample_ids <- pheno$FILE_NAME

# Subset the countMatrix to include only the columns in sample_ids
countMatrixfinal<- countMatrixclean[, sample_ids]
countMatrixfinal<-floor(countMatrixfinal)
#First we need to modify our phenotype data
pheno$phase <- ifelse(grepl("Phase1", pheno$FILE_NAME), "Phase1", ifelse(grepl("Phase2", pheno$FILE_NAME), "Phase2", NA))
pheno$phase<- factor(pheno$phase)

str(pheno)

#5.3 DESeq -----------------------------------------------
dds <- DESeqDataSetFromMatrix(countData = countMatrixfinal, colData = pheno, design = ~ factor(Gender) + AgeVisit + factor(Status_time))
#keep <- rowSums(counts(dds) >= ) matrixStats::rowCounts(quantData$counts<10) < round(0.9*dim(quantData$counts)
dds.de <- DESeq(dds, parallel = F, betaPrior = FALSE)

dds.res <- results(dds.de, tidy = T)
write.csv(dds.res, "Mutation_GBA.csv")
#Make a copy of dds.res
dds.res2 <- dds.res
#Remove the dot and proceeding numbers
dds.res2$row <- sub("\\..*","",dds.res2$row)
dds.res2$row <- mapIds(org.Hs.eg.db, keys = dds.res2$row, column = "SYMBOL", keytype = "ENSEMBL")

summary(dds.res)
dds.sig <- subset(dds.res2, dds.res2$padj < 0.05)

#5.4 plotting the volcano plot------------------------------------
DE <- dds.res2[order(dds.res2$padj), ]
volcano.name <- "PPMI Linear RNA Expression Last Visit ca/co + GBA+"
l2f.lim <- 0
plim <- 0.05
choice <- 'padj'
plotDE <- DE %>% mutate(gene_type = case_when(log2FoldChange >= l2f.lim & get(choice) <= plim ~ "up",
                                              log2FoldChange <= -l2f.lim & get(choice) <= plim ~ "down", TRUE ~ "ns"))
plotDE <- plotDE[order(plotDE$pvalue), ]
#Get the 9 circ degs
result_9circ<- read.table("9circs.txt", header = T) 
result_9circ$linear <- sub("\\..*","",result_9circ$linear)
result_9circ$linear <- mapIds(org.Hs.eg.db, keys = result_9circ$linear, column = "SYMBOL", keytype = "ENSEMBL")
circ_names<-result_9circ$linear

nine_circ<- plotDE[plotDE$row %in% circ_names, ]
cols <- densCols(plotDE$log2FoldChange, plotDE$padj)
cols[plotDE$gene_type=='up']<-"#E69F00"
cols[plotDE$gene_type=='down']<-"#56B4E9"
cols[plotDE$gene_type=='ns']<-"#999999"
sizes <- c("up" = 3, "down" = 3, "ns" = 2)
alphas <- c("up" = 1, "down" = 1, "ns" = 0.5)
sig <- plotDE[plotDE$pvalue<=plim & plotDE$gene_type!='ns',]

top_hits_num <- 10
sig <- sig[1:top_hits_num, ]
ggplot(plotDE, aes(x=log2FoldChange, y=-log10(pvalue), size=gene_type, alpha = gene_type))+
  geom_point(col = cols)+
  #scale_y_continuous(expand = c(0,0), limits = c(0, 15))+
  geom_hline(yintercept = -log10(plim), linetype = "dashed") +
  geom_vline(xintercept = c(-l2f.lim, l2f.lim), linetype = "dashed") +
  geom_label_repel(data = nine_circ, aes(label = row), force = 2, nudge_y = 1) +
  scale_size_manual(values = sizes) + # Modify point size
  scale_alpha_manual(values = alphas) + # Modify point transparency
  ggtitle(volcano.name) +
  xlab("Effect size: log2(fold-change)") +
  ylab("-log10(p-value)")+
  theme_bw()+
  theme(legend.position = "none")

# 6.0 SNCA vs Controls-----------------------------------------------------------------------------------------------------------------------------------

#6.1 Import pheno  -----------------------------------------------
#load phenotype 
pheno <- read.table("ppmi_pheno", header = T, stringsAsFactors = F)
# Pull out control and PD individuals (0 and 1 in Status_time column)
pheno <- subset(pheno, pheno$Status_time %in% c(0, 1))

# select for last visit only
pheno <- pheno %>% group_by(PATNO) %>% mutate(last_visit = (Time == max(Time)))
pheno <- subset(pheno, pheno$last_visit == T)


# 6.2 Read in Matrix ------------------------------------------------
countMatrix <- read.csv("ppmi_countmatrix.csv", row.names = 1, header = T)


#Removing sample with low reads
countMatrixclean<- countMatrix[(rowCounts(countMatrix[,-1]<10) < round(0.9*dim(countMatrix[,-1])[2])),]
pheno <- pheno[pheno$FILE_NAME %in% colnames(countMatrixclean),]

# Extract the sample IDs from the phenotype data
sample_ids <- pheno$FILE_NAME

# Subset the countMatrix to include only the columns in sample_ids
countMatrixfinal<- countMatrixclean[, sample_ids]
countMatrixfinal<-floor(countMatrixfinal)
#Modify pheno for mutations
pheno <- pheno %>%
  mutate(Mutation = ifelse(Status_time== "1" & is.na(Mutation), "none", Mutation),
         Mutation = ifelse(Status_time == "0" & is.na(Mutation), "control", Mutation))
pheno <- pheno %>% filter(Mutation %in% c("SNCA+", "control"))
pheno$Mutation<-as.factor(pheno$Mutation)
#Modify count matrix for mutation
# Extract the sample IDs from the phenotype data
sample_ids <- pheno$FILE_NAME

# Subset the countMatrix to include only the columns in sample_ids
countMatrixfinal<- countMatrixclean[, sample_ids]
countMatrixfinal<-floor(countMatrixfinal)
#First we need to modify our phenotype data
pheno$phase <- ifelse(grepl("Phase1", pheno$FILE_NAME), "Phase1", ifelse(grepl("Phase2", pheno$FILE_NAME), "Phase2", NA))
pheno$phase<- factor(pheno$phase)
str(pheno)

# 6.3 DESeq ---------------------------------------------------------------
dds <- DESeqDataSetFromMatrix(countData = countMatrixfinal, colData = pheno, design = ~ factor(Gender) + AgeVisit + factor(Status_time))
#keep <- rowSums(counts(dds) >= ) matrixStats::rowCounts(quantData$counts<10) < round(0.9*dim(quantData$counts)
dds.de <- DESeq(dds, parallel = F, betaPrior = FALSE)

dds.res <- results(dds.de, tidy = T)
write.csv(dds.res, "Mutation/Mutation_SNCA.csv")
#Make a copy of dds.res
dds.res2 <- dds.res
#Remove the dot and proceeding numbers
dds.res2$row <- sub("\\..*","",dds.res2$row)
dds.res2$row <- mapIds(org.Hs.eg.db, keys = dds.res2$row, column = "SYMBOL", keytype = "ENSEMBL")

summary(dds.res)
dds.sig <- subset(dds.res2, dds.res2$padj < 0.05)

# 6.4 plotting the volcano plot----------------------------------------------
DE <- dds.res2[order(dds.res2$padj), ]
volcano.name <- "PPMI Linear RNA Expression Last Visit ca/co + SNCA"
l2f.lim <- 0
plim <- 0.05
choice <- 'padj'
plotDE <- DE %>% mutate(gene_type = case_when(log2FoldChange >= l2f.lim & get(choice) <= plim ~ "up",
                                              log2FoldChange <= -l2f.lim & get(choice) <= plim ~ "down", TRUE ~ "ns"))
plotDE <- plotDE[order(plotDE$pvalue), ]
#Get the 9 circ degs
result_9circ<- read.table("9_circs.txt", header = T) 
result_9circ$linear <- sub("\\..*","",result_9circ$linear)
result_9circ$linear <- mapIds(org.Hs.eg.db, keys = result_9circ$linear, column = "SYMBOL", keytype = "ENSEMBL")
circ_names<-result_9circ$linear

nine_circ<- plotDE[plotDE$row %in% circ_names, ]
cols <- densCols(plotDE$log2FoldChange, plotDE$padj)
cols[plotDE$gene_type=='up']<-"#E69F00"
cols[plotDE$gene_type=='down']<-"#56B4E9"
cols[plotDE$gene_type=='ns']<-"#999999"
sizes <- c("up" = 3, "down" = 3, "ns" = 2)
alphas <- c("up" = 1, "down" = 1, "ns" = 0.5)
sig <- plotDE[plotDE$pvalue<=plim & plotDE$gene_type!='ns',]

top_hits_num <- 10
sig <- sig[1:top_hits_num, ]
ggplot(plotDE, aes(x=log2FoldChange, y=-log10(pvalue), size=gene_type, alpha = gene_type))+
  geom_point(col = cols)+
  #scale_y_continuous(expand = c(0,0), limits = c(0, 15))+
  geom_hline(yintercept = -log10(plim), linetype = "dashed") +
  geom_vline(xintercept = c(-l2f.lim, l2f.lim), linetype = "dashed") +
  geom_label_repel(data = nine_circ, aes(label = row), force = 2, nudge_y = 1) +
  scale_size_manual(values = sizes) + # Modify point size
  scale_alpha_manual(values = alphas) + # Modify point transparency
  ggtitle(volcano.name) +
  xlab("Effect size: log2(fold-change)") +
  ylab("-log10(p-value)")+
  theme_bw()+
  theme(legend.position = "none")


#7.0 MUtations vs Controls-----------------------------------------------------------------------------------------------------------------------------------------------

# 7.1 Import pheno  ----------------------------------------------
#load phenotype 
pheno <- read.table("ppmi_pheno", header = T, stringsAsFactors = F)
# Pull out control and PD individuals (0 and 1 in Status_time column)
pheno <- subset(pheno, pheno$Status_time %in% c(0, 1))
pheno <- pheno %>%
  mutate(Mutation = ifelse(Status...13 == "PD" & is.na(Mutation), "Non-carrier", Mutation),
         Mutation = ifelse(Status...13 == "HC" & is.na(Mutation), "control", Mutation))

pheno <- pheno %>% filter(!Mutation %in% c("Non-carrier"))
# select for last visit only
pheno <- pheno %>% group_by(PATNO) %>% mutate(last_visit = (Time == max(Time)))
pheno <- subset(pheno, pheno$last_visit == T)


# 7.2 Read in Matrix --------------------------------------------
countMatrix <- read.csv("ppmi_countmatrix.csv", row.names = 1)

#Removing sample with low reads
countMatrixclean<- countMatrix[(rowCounts(countMatrix[,-1]<10) < round(0.9*dim(countMatrix[,-1])[2])),]
pheno <- pheno[pheno$FILE_NAME %in% colnames(countMatrixclean),]

# Extract the sample IDs from the phenotype data
sample_ids <- pheno$FILE_NAME

# Subset the countMatrix to include only the columns in sample_ids
countMatrixfinal<- countMatrixclean[, sample_ids]
countMatrixfinal<-floor(countMatrixfinal)
#First we need to modify our phenotype data
pheno$phase <- ifelse(grepl("Phase1", pheno$FILE_NAME), "Phase1", ifelse(grepl("Phase2", pheno$FILE_NAME), "Phase2", NA))
pheno$phase<- factor(pheno$phase)

str(pheno)
# 7.3 DESeq ------------------------------------------------------
dds <- DESeqDataSetFromMatrix(countData = countMatrixfinal, colData = pheno, design = ~ factor(Gender) + AgeVisit + factor(Status_time))
#keep <- rowSums(counts(dds) >= ) matrixStats::rowCounts(quantData$counts<10) < round(0.9*dim(quantData$counts)
dds.de <- DESeq(dds, parallel = F, betaPrior = FALSE)

dds.res <- results(dds.de, tidy = T)
write.csv(dds.res, "Mutation_carriers_controls.csv")
#Make a copy of dds.res
dds.res2 <- dds.res
#Remove the dot and proceeding numbers
dds.res2$row <- sub("\\..*","",dds.res2$row)
dds.res2$row <- mapIds(org.Hs.eg.db, keys = dds.res2$row, column = "SYMBOL", keytype = "ENSEMBL")

summary(dds.res)
dds.sig <- subset(dds.res2, dds.res2$padj < 0.05)

# plotting the volcano plot
DE <- dds.res2[order(dds.res2$padj), ]
volcano.name <- "PPMI Linear RNA Expression Last Visit Cpntrols vs Mutations carriers"
l2f.lim <- 0
plim <- 0.05
choice <- 'padj'
plotDE <- DE %>% mutate(gene_type = case_when(log2FoldChange >= l2f.lim & get(choice) <= plim ~ "up",
                                              log2FoldChange <= -l2f.lim & get(choice) <= plim ~ "down", TRUE ~ "ns"))
plotDE <- plotDE[order(plotDE$pvalue), ]
#Get the 9 circ degs
result_9circ<- read.table("9_circs", header = T) 
result_9circ$linear <- sub("\\..*","",result_9circ$linear)
result_9circ$linear <- mapIds(org.Hs.eg.db, keys = result_9circ$linear, column = "SYMBOL", keytype = "ENSEMBL")
circ_names<-result_9circ$linear

nine_circ<- plotDE[plotDE$row %in% circ_names, ]
cols <- densCols(plotDE$log2FoldChange, plotDE$padj)
cols[plotDE$gene_type=='up']<-"#E69F00"
cols[plotDE$gene_type=='down']<-"#56B4E9"
cols[plotDE$gene_type=='ns']<-"#999999"
sizes <- c("up" = 3, "down" = 3, "ns" = 2)
alphas <- c("up" = 1, "down" = 1, "ns" = 0.5)
sig <- plotDE[plotDE$pvalue<=plim & plotDE$gene_type!='ns',]

top_hits_num <- 10
sig <- sig[1:top_hits_num, ]
ggplot(plotDE, aes(x=log2FoldChange, y=-log10(pvalue), size=gene_type, alpha = gene_type))+
  geom_point(col = cols)+
  #scale_y_continuous(expand = c(0,0), limits = c(0, 15))+
  geom_hline(yintercept = -log10(plim), linetype = "dashed") +
  geom_vline(xintercept = c(-l2f.lim, l2f.lim), linetype = "dashed") +
  geom_label_repel(data = nine_circ, aes(label = row), force = 2, nudge_y = 1) +
  scale_size_manual(values = sizes) + # Modify point size
  scale_alpha_manual(values = alphas) + # Modify point transparency
  ggtitle(volcano.name) +
  xlab("Effect size: log2(fold-change)") +
  ylab("-log10(p-value)")+
  theme_bw()+
  theme(legend.position = "none")


# 8.0 Control vs Sporadic--------------------------------------------------------------------------------------------------------------------------------------------------------------

#8.1 Import pheno  --------------------------------------

#load phenotype 
pheno <- read.table("ppmi_countmatrix.txt", header = T, stringsAsFactors = F)
# Pull out control and PD individuals (0 and 1 in Status_time column)
pheno <- subset(pheno, pheno$Status_time %in% c(1))
# Replace NA in the mutation column with 0
pheno$Mutation[is.na(pheno$Mutation)] <- 0

# Replace all non-NA (which are now non-zero) values in the mutation column with 1
pheno$Mutation[pheno$Mutation != 0] <- 1

# select for last visit only
pheno <- pheno %>% group_by(PATNO) %>% mutate(last_visit = (Time == max(Time)))
pheno <- subset(pheno, pheno$last_visit == T)

#Read in Matrix -------------------------------------------
countMatrix <- read.csv("ppmi_countmatrix.csv", row.names = 1)


#Removing sample with low reads
countMatrixclean<- countMatrix[(rowCounts(countMatrix[,-1]<10) < round(0.9*dim(countMatrix[,-1])[2])),]
pheno <- pheno[pheno$FILE_NAME %in% colnames(countMatrixclean),]

# Extract the sample IDs from the phenotype data
sample_ids <- pheno$FILE_NAME

# Subset the countMatrix to include only the columns in sample_ids
countMatrixfinal<- countMatrixclean[, sample_ids]
countMatrixfinal<-floor(countMatrixfinal)
#First we need to modify our phenotype data
pheno$phase <- ifelse(grepl("Phase1", pheno$FILE_NAME), "Phase1", ifelse(grepl("Phase2", pheno$FILE_NAME), "Phase2", NA))
pheno$phase<- factor(pheno$phase)
str(pheno)

# 8.2 DESeq ------------------------------------------------------
dds <- DESeqDataSetFromMatrix(countData = countMatrixfinal, colData = pheno, design = ~ factor(Gender) + AgeVisit + factor(Mutation))
#keep <- rowSums(counts(dds) >= ) matrixStats::rowCounts(quantData$counts<10) < round(0.9*dim(quantData$counts)
dds.de <- DESeq(dds, parallel = F, betaPrior = FALSE)

dds.res <- results(dds.de, tidy = T)
write.csv(dds.res, "Mutation_carriers_sporadic.csv")
#Make a copy of dds.res
dds.res2 <- dds.res
#Remove the dot and proceeding numbers
dds.res2$row <- sub("\\..*","",dds.res2$row)
dds.res2$row <- mapIds(org.Hs.eg.db, keys = dds.res2$row, column = "SYMBOL", keytype = "ENSEMBL")

summary(dds.res)
dds.sig <- subset(dds.res2, dds.res2$padj < 0.05)

#8.3  Plotting the volcano plot-------------------------------------
DE <- dds.res2[order(dds.res2$padj), ]
volcano.name <- "PPMI Linear RNA Expression Last Visit Sporadic vs Mutations carriers"
l2f.lim <- 0
plim <- 0.05
choice <- 'padj'
plotDE <- DE %>% mutate(gene_type = case_when(log2FoldChange >= l2f.lim & get(choice) <= plim ~ "up",
                                              log2FoldChange <= -l2f.lim & get(choice) <= plim ~ "down", TRUE ~ "ns"))
plotDE <- plotDE[order(plotDE$pvalue), ]
#Get the 9 circ degs
result_9circ<- read.table("9_circs.txt", header = T) 
result_9circ$linear <- sub("\\..*","",result_9circ$linear)
result_9circ$linear <- mapIds(org.Hs.eg.db, keys = result_9circ$linear, column = "SYMBOL", keytype = "ENSEMBL")
circ_names<-result_9circ$linear

nine_circ<- plotDE[plotDE$row %in% circ_names, ]
cols <- densCols(plotDE$log2FoldChange, plotDE$padj)
cols[plotDE$gene_type=='up']<-"#E69F00"
cols[plotDE$gene_type=='down']<-"#56B4E9"
cols[plotDE$gene_type=='ns']<-"#999999"
sizes <- c("up" = 3, "down" = 3, "ns" = 2)
alphas <- c("up" = 1, "down" = 1, "ns" = 0.5)
sig <- plotDE[plotDE$pvalue<=plim & plotDE$gene_type!='ns',]

top_hits_num <- 10
sig <- sig[1:top_hits_num, ]
ggplot(plotDE, aes(x=log2FoldChange, y=-log10(pvalue), size=gene_type, alpha = gene_type))+
  geom_point(col = cols)+
  #scale_y_continuous(expand = c(0,0), limits = c(0, 15))+
  geom_hline(yintercept = -log10(plim), linetype = "dashed") +
  geom_vline(xintercept = c(-l2f.lim, l2f.lim), linetype = "dashed") +
  geom_label_repel(data = nine_circ, aes(label = row), force = 2, nudge_y = 1) +
  scale_size_manual(values = sizes) + # Modify point size
  scale_alpha_manual(values = alphas) + # Modify point transparency
  ggtitle(volcano.name) +
  xlab("Effect size: log2(fold-change)") +
  ylab("-log10(p-value)")+
  theme_bw()+
  theme(legend.position = "none")



# In order to confirm significance in  the circular results, it was requiered to analyze some transcripts in specific mutations analysis 


#10.0 Preparte de data for the analyses --------------------------------------------------------------------------------------------------------------

#Get the 9 circ degs
result_9circ<- read.table("/03-DryLab/04-Analyses/2022_PD-Blood-circRNA_LI/2023_linearRNA_Mixed_Model_Santiago/PDBP/results_tables/02_mixed_model_9circRNA_results_table.txt", header = T)  
# 
nine<-result_9circ$linear

#10.1 PPMI---------------------------------------------------------------------
pheno<- read.table("/03-DryLab/00_TO_CLEANUP/circRNA/PPMI/June2022_DE-Analysis_Yichen/PPMI/00_normalization_counts/00_PPMI_Phenotype_all_PCs_cleaned_May2023.txt", header = T, stringsAsFactors = F)
pheno <- subset(pheno, pheno$Status_time != 2)
pheno <- pheno %>% group_by(PATNO) %>% mutate(visit_counts = length(time_in_years))
# filtered fr last visit
pheno <- pheno %>% group_by(PATNO) %>% mutate(last_visit = (Time == max(Time)))
pheno <- subset(pheno, pheno$last_visit == T)
#Creating sample_id column
pheno$sample_id<- paste("PP-", pheno$PATNO, "-", pheno$EVENT_ID, "M", pheno$EVENTCode, "T1", sep = "")
pheno$sample_id <- gsub("V0[0-9]", "SV", pheno$sample_id)
# Replace M1 with M6, M2 with M12, M3 with M24, and M4 with M36 in sample_id_2 column
pheno$sample_id <- gsub("M1", "M6", pheno$sample_id)
pheno$sample_id <- gsub("M2", "M12", pheno$sample_id)
pheno$sample_id <- gsub("M3", "M24", pheno$sample_id)
pheno$sample_id <- gsub("M4", "M36", pheno$sample_id)

# Load cell coun data
cell_counts<-read.csv("/03-DryLab/04-Analyses/2022_PD-Blood-circRNA_LI/2023_circRNA_sensitivity_ABeric/normalized.cellcounts.PPMI.afterQC.csv")
#merge cell counts to pheno
pheno <- merge(cell_counts, pheno, by = "sample_id")

#Load ppmi count matrix
ppmi_countMatrix<-read.csv("/03-DryLab/04-Analyses/2022_PD-Blood-circRNA_LI/2023_linearRNA_Mixed_Model_Santiago/PPMI/lin.ppmi.count.matrix.csv", row.names = 1)

#Removing sample with low reads
ppmi_countMatrixclean<- ppmi_countMatrix[(rowCounts(ppmi_countMatrix[,-1]<10) < round(0.9*dim(ppmi_countMatrix[,-1])[2])),]
pheno <- pheno[pheno$FILE_NAME %in% colnames(ppmi_countMatrixclean),]

# Extract the sample IDs from the phenotype data
sample_ids <- pheno$FILE_NAME

# Subset the countMatrix to include only the columns in sample_ids
ppmi_countMatrixfinal<- ppmi_countMatrixclean[, sample_ids]


# 10.2 circular counts--------------------------------------------------------

data <- read.table("/03-DryLab/04-Analyses/2022_PD-Blood-circRNA_LI/2023_circRNA_Cross_Sectional_YSun/PPMI/00_normalization_counts/00_PPMI_Common_Circs_AllVisits_CLEAN_TOUSE_May2023.tsv", header = T, stringsAsFactors = F)
com <- read.table("/03-DryLab/04-Analyses/2022_PD-Blood-circRNA_LI/2023_circRNA_Cross_Sectional_YSun/PPMI/08_figures_tables_for_paper/00_1789_common_circRNAs_btw_PDBP_and_PPMI.txt")
com <- com$V1
circ_ppmi_countMatrix<- subset(data, rownames(data) %in% com)

circ_ppmi_countMatrix<-circ_ppmi_countMatrix[, sample_ids]
ppmi_finalmatrix<-rbind(circ_ppmi_countMatrix, ppmi_countMatrixfinal)
ppmi_finalmatrix<-floor(ppmi_finalmatrix)


#10.3 Count normalization---------------------------------------------------

rnaDDS <- DESeqDataSetFromMatrix(countData =ppmi_finalmatrix , colData = pheno, design = ~ 1)
vstDDS<-varianceStabilizingTransformation(rnaDDS)
ppmi_vst_countmatrix<-assay(vstDDS)


#10.4 create new pheno -----------------------------------------------------

fam<-ppmi_vst_countmatrix[c("circFAM13B","ENSG00000031003.10", "circSPI1", "ENSG00000066336.11", "circAFF2", "ENSG00000155966.14"),]
fam<-t(fam)
fam<-as.data.frame(fam)
fam_pheno <- merge(fam, pheno, by.x = 0, by.y = "FILE_NAME", all.x = TRUE)
colnames(fam_pheno)[colnames(fam_pheno) == "Row.names"] <- "FILE_NAME"


#10.5 Running Deseq----------------------------------------------------------

# load raw count matrix (not the normalized one, DESeq2 does not take normalized value)
data <- read.table("circ_countmatrix.txt", header = T, stringsAsFactors = F)
com <- read.table("common_circ_countmatrix.txt")
com <- com$V1
data <- subset(data, rownames(data) %in% com)
# select covariates in pheno that are needed for DESeq2
fam_pheno2 <- fam_pheno %>% select(FILE_NAME,ENSG00000031003.10,ENSG00000066336.11,ENSG00000155966.14 )
fam_pheno_deseq<-merge(fam_pheno2, pheno, by= "FILE_NAME")


# 10.0 SPI1 for CA/Co--------------------------------------------------------------------------------------------------------------------------------------

pheno<-fam_pheno_deseq
#Modify pheno for mutations
pheno <- pheno %>%
  mutate(Mutation = ifelse(Status_time == "0" & is.na(Mutation), "none", Mutation),
         Mutation = ifelse(Status_time == "1" & is.na(Mutation), "none", Mutation))

data2 <- data[,pheno$FILE_NAME]
dds <- DESeqDataSetFromMatrix(countData = data2, colData = pheno, design = ~ factor(Gender) +ENSG00000066336.11  +  AgeVisit + Mutation +  factor(Status_time))
dds.de <- DESeq(dds, parallel = F, betaPrior = FALSE)

dds.res <- results(dds.de, tidy = T)
write.csv(dds.res, "SPI1_CaCo_degs.csv")


# 11.0 AFF2 for CAC/cO analysis---------------------------------------------------------------------------------------------------------------------------

pheno<-fam_pheno_deseq
#Modify pheno for mutations
pheno <- pheno %>%
  mutate(Mutation = ifelse(Status_time == "0" & is.na(Mutation), "none", Mutation),
         Mutation = ifelse(Status_time == "1" & is.na(Mutation), "none", Mutation))

data2 <- data[,pheno$FILE_NAME]
dds <- DESeqDataSetFromMatrix(countData = data2, colData = pheno, design = ~ factor(Gender) +ENSG00000155966.14  +  AgeVisit + Mutation +  factor(Status_time))
dds.de <- DESeq(dds, parallel = F, betaPrior = FALSE)

dds.res <- results(dds.de, tidy = T)
write.csv(dds.res, "AFF2_CaCo_degs.csv")


# 12.0 SPI1 for LRRK-----------------------------------------------------------------------------------------------------------------------------------------

#Modify pheno for mutations
pheno<-fam_pheno_deseq
pheno <- pheno %>%
  mutate(Mutation = ifelse(Status_time== "1" & is.na(Mutation), "none", Mutation),
         Mutation = ifelse(Status_time == "0" & is.na(Mutation), "control", Mutation))
pheno <- pheno %>% filter(Mutation %in% c("LRRK2+", "control"))
pheno$Mutation<-as.factor(pheno$Mutation)
data2 <- data[,pheno$FILE_NAME]
dds <- DESeqDataSetFromMatrix(countData = data2, colData = pheno, design = ~ factor(Gender) +ENSG00000066336.11  +  AgeVisit +  factor(Status_time))
dds.de <- DESeq(dds, parallel = F, betaPrior = FALSE)

dds.res <- results(dds.de, tidy = T)
write.csv(dds.res, "SPI1_LRRK2_degs.csv")


# 13.0 SPI1 FOR GBA--------------------------------------------------------------------------------------------------------------------------------------------

pheno<-fam_pheno_deseq
pheno <- pheno %>%
  mutate(Mutation = ifelse(Status_time== "1" & is.na(Mutation), "none", Mutation),
         Mutation = ifelse(Status_time == "0" & is.na(Mutation), "control", Mutation))
pheno <- pheno %>% filter(Mutation %in% c("GBA+", "control"))
pheno$Mutation<-as.factor(pheno$Mutation)
data2 <- data[,pheno$FILE_NAME]
dds <- DESeqDataSetFromMatrix(countData = data2, colData = pheno, design = ~ factor(Gender) +ENSG00000066336.11  +  AgeVisit +  factor(Status_time))
dds.de <- DESeq(dds, parallel = F, betaPrior = FALSE)

dds.res <- results(dds.de, tidy = T)
write.csv(dds.res, "/03-DryLab/04-Analyses/2022_PD-Blood-circRNA_LI/2023_linearRNA_Mixed_Model_SantiagoSPI1_GBA_degs.csv")










